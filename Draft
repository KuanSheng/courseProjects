#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#define CHUNKSIZE 1000
#define N    500000

bool isPrime(int a){
	for(int i=2; i<=sqrt(a*1.0); i++)
		if(a%i==0)
			return false;
	return true;
}

int main(int argc, char *argv[])
{
    int nthreads, tid, i, count=1;
	clock_t start, end;
	double processingTime, time1, time2;

	start = clock();
	for(i=3; i<=N; i+=2)
		if(isPrime(i))
			count++;
	end = clock();

	printf("There are %d prime numbers which is equal or less than %d\n", count, N);
	processingTime = (double) (end - start)/CLOCKS_PER_SEC;
	printf("Time used for single thread program is %fs\n", processingTime);
	printf("\n");

	count=1;
	int chunk = CHUNKSIZE;

	time1 = omp_get_wtime();
    #pragma omp parallel shared(nthreads, count) private(i, tid)
    {
        tid = omp_get_thread_num();
		if(tid==0){
			nthreads = omp_get_num_threads();
		}
     
		#pragma omp for schedule(dynamic, chunk)
		for(i=3; i<=N; i+=2)
			if(isPrime(i)){
				#pragma omp atomic
				count++;
			}
	}
	time2 = omp_get_wtime();
	printf("There are %d prime numbers which is equal or less than %d\n", count, N);
	printf("Time used for %d dynamic scheduling threads is %fs\n", nthreads, time2-time1);
	printf("\n");

	count=1;
	time1 = omp_get_wtime();
    #pragma omp parallel shared(nthreads, count) private(i, tid)
    {
        tid = omp_get_thread_num();
		if(tid==0){
			nthreads = omp_get_num_threads();
		}
     
		#pragma omp for schedule(static, chunk)
		for(i=3; i<=N; i+=2)
			if(isPrime(i)){
				#pragma omp atomic
				count++;
			}
	}
	time2 = omp_get_wtime();
	printf("There are %d prime numbers which is equal or less than %d\n", count, N);
	printf("Time used for %d static scheduling threads is %fs\n", nthreads, time2-time1);

	printf("\n");
    printf("press any key to continue\n");
    getchar();
}
